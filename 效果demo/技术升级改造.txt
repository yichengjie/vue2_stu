技术框架升级（应用当前行业更新框架
--技术升级改造.txt

为了解决前端，前期开发代码量大、调试不方便、和后期维护成本高的问题，
我们使用了当前主流成熟的前端解决方案。




--
为了web应用更好的体验，前端就需要做更多的事。
继续使用传统的web开发方式，遇到很多开发问题(代码、时间、部署等)。
这就需要更好的前端解决方案。


1.前端工程化（开发模式的转变-前后分离，源码压缩合并）。
  节省开发时间，降低调试难度：
  > > 前端可以不依赖后端环境(使用tomcat跑jsp)，这样调试和开发都变的简单。
  > > 源码修改后的自动编译，页面自动刷新。
  > > 使用mockjs拦截项目中所有api的ajax请求，返回测试模板数据，更容将代码迁移到java web项目。
  减少页面网络请求数，从而加快访问速度：
  > > 使用的webapck将js、css、图片，等资源打包，合并。
  更早的发现代码中的错误：
  > > 配置eslint，可以在js的编译期发现错误，这个和项目中配置的sonar的功能差不多。
  可以满足技术升级需求:
  > > 项目中可使用 less,sass...，es6，只需要加一个对应的loader配置即可。
  > > 可支持单元测试(Jasmine)，后期可以考虑。
2.页面的组件化。
  加快开发速度:
  > > 公共非业务的组件的使用非常简单，(eg：Header.js,Hooter.js,Pagebar.js)。
  > > 项目相关的业务组件积累，当别的页面需要时，直接一行代码就能直接使用。
  代码的可维护性增加:
  > > 当需要需要Header的效果的时候，只需要找到Header.js修改即可,业务组件也类似。
  > > 可重用性机会增加 (以前html + js + css，现在只需要一个js文件就可以了)。
  代码可读性增加：
  复杂的页面代码行数会有显著的减少(主页:1500多行->300行)，因为业务分散到不同的独立的组件中了。


mvn deploy:deploy-file --settings E:\install\apache-maven-3.0.5\conf\settings.xml -DgroupId=com.travelsky.fare –DartifactId=auth -Dpackaging=jar -Dversion=0.1 -Dfile=D:\auth.jar -DrepositoryId=releases -Durl=http://172.27.18.106:8081/nexus/content/repositories/releases

mvn deploy:deploy-file --settings E:\install\apache-maven-3.0.5\conf\settings.xml -DgroupId=com.travelsky.fare -DartifactId=auth -Dversion=0.1 -Dpackaging=jar -Dfile=D:\auth.jar -Durl=http://172.27.18.106:8081/nexus/content/repositories/releases/ -DrepositoryId=releases

---成功执行的
mvn deploy:deploy-file --settings E:\install\apache-maven-3.0.5\conf\settings.xml -DgroupId=com.travelsky.fare -DartifactId=auth -Dversion=0.4 -Dpackaging=jar -Dfile=D:\auth.jar -Durl=http://172.27.18.106:8081/nexus/content/repositories/releases/ -DrepositoryId=nexus-releases

mvn deploy:deploy-file --settings E:\install\apache-maven-3.0.5\conf\settings.xml -DgroupId=com.travelsky.fare -DartifactId=auth -Dversion=0.5 -Dpackaging=jar -Dfile=D:\auth.jar -Durl=http://172.27.18.106:8081/nexus/content/groups/public -DrepositoryId=nexus-snapshots

mvn deploy:deploy-file --settings E:\install\apache-maven-3.0.5\conf\settings.xml -DgroupId=com.travelsky.fare -DartifactId=auth -Dversion=0.1 -Dpackaging=jar -Dfile=D:\auth.jar -Durl=http://172.27.18.106:8081/nexus/content/groups/public/ -DrepositoryId=nexus-releases


mvn deploy:deploy-file --settings E:\install\apache-maven-3.0.5\conf\settings.xml -DgroupId=com.travelsky.fare -DartifactId=auth -Dversion=0.1 -Dpackaging=jar -Dfile=D:\auth.jar -Durl=http://172.27.18.106:8081/nexus/content/groups/public/ -DrepositoryId=releases






































































传统的前端，全局dom操作，代码复用率低，自己需要写的东西太多，导致代码量大。
没有一个整体上的架构，软件后期维护成本较大(主要是最对修改)。另外就是开发调试麻烦，严重依赖后台容器(jsp)以及接口。

前端需求越来越复杂，加上为了解决传统前端面临的问题。使用webpack解决前端模块化和工程化问题。



