技术框架升级（应用当前行业更新框架
--技术升级改造.txt

为了解决传统前端，前期开发代码量大，调试麻烦的，后期维护成本高的问题。
选用现有成熟主流的前端解决方案(css+js)。

1.前端工程化，从之前只能管理js的spm过度到了非常智能简单但是强大的webpack。
  页面资源加载请求数量更少，jpg,css，js等进行合并压缩。
  可以满足现有的任何新技术需要(less,sass...，es6)，只需要加一个对应的loader配置即可。
  前端可以不依赖后端环境(使用tomcat跑jsp)，这样调试和开发都变的简单。
  使用mockjs拦截项目中所有api的ajax请求，返回测试模板数据，无缝将前端开发代码，迁移到真实的java web项目。
  配置eslint，可以在js的编译期发现错误，这个和sonar配置的差不多。
  可支持单元测试(Jasmine)，后期可以考虑。

2.页面的组件化(eg：Header.js,Hooter.js,Pagebar.js)。
  项目也可以积累很多的业务组件，当别的页面需要同样一个效果的时候，直接引入即可。
  代码的可维护性增加（当需要需要Header的效果的时候，只需要找到Header.js修改即可）。
  可重用性机会增加 (以前html + js + css，现在只需要一个js文件就可以了)。
  复杂的页面代码行数会有显著的减少，因为业务分散到不同的独立的组件中了，这样代码更容易阅读。

  






































































传统的前端，全局dom操作，代码复用率低，自己需要写的东西太多，导致代码量大。
没有一个整体上的架构，软件后期维护成本较大(主要是最对修改)。另外就是开发调试麻烦，严重依赖后台容器(jsp)以及接口。

前端需求越来越复杂，加上为了解决传统前端面临的问题。使用webpack解决前端模块化和工程化问题。



